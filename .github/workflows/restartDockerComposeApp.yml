name: Restart docker compose

on:
  workflow_call:
    inputs:
      host:
        required: true
        type: string
      user:
        default: "root"
        type: string
      compose_file:
        type: string
        required: true
      branch_to_deploy:
        type: string
        default: develop
      region:
        type: string
        required: true
    secrets:
      SERVER_ACCESS_KEY:
        required: true

jobs:
  restart-app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: "Connect to server"
        env:
          SERVER_ACCESS_KEY: ${{ secrets.SERVER_ACCESS_KEY }}
        run: |
          echo "$SERVER_ACCESS_KEY" > access.pem && chmod 400 access.pem
          ssh  -o StrictHostKeyChecking=no -i access.pem ${{ inputs.user }}@${{ inputs.host}} '
              export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} &&
              export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} &&

              aws ecr get-login-password --region ${{ inputs.region }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.region }}.amazonaws.com &&

              git config --global --add safe.directory /home/ubuntu/app &&
              ([[ ! -d /home/ubuntu/app ]] && git clone https://${{ secrets.DEPLOY_USER_TOKEN }}@github.com/leuk777/sanitas.deploy.git /home/ubuntu/app);
              cd /home/ubuntu/app &&
              git checkout ${{ inputs.branch_to_deploy }} &&
              git fetch --all &&
              git reset --hard && 
              git pull &&
              ls docker-compose* 1> /dev/null 2>&1 && 
              [[ -n $(docker ps -aq) ]] && docker stop $(docker ps -aq) && docker rm $(docker ps -aq);
              docker compose down && 
              for v in $(docker volume ls -q); do [[ $v != *"db"* && $v != *"caddy"* ]] && docker volume rm "$v"; done;
              docker compose -f ${{ inputs.compose_file }} up -d --build
          '
